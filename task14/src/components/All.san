<template>
    <div class="all-main">
        <div class="selector" on-click="chooseDisplay($event)">
            <ul class="select-prior">
                <li class="prior-opt" tag="0">
                    <i class="fa fa-circle high" aria-hidden="true"></i>
                    <span class="sign">高优</span>
                </li>
                <li class="prior-opt" tag="1">
                    <i class="fa fa-circle medium" aria-hidden="true"></i>
                    <span class="sign">中优</span>
                </li>
                <li class="prior-opt" tag="2">
                    <i class="fa fa-circle low" aria-hidden="true"></i>
                    <span class="sign">低优</span>
                </li>
            </ul>
            <ul class="select-status">
                <li class="status-opt" tag="0">
                    <i class="fa fa-play" aria-hidden="true"></i>
                    <span class="sign">进行中</span>
                </li>
                <li class="status-opt" tag="1">
                    <i class="fa fa-pause" aria-hidden="true"></i>
                    <span class="sign">待办</span>
                </li>
                <li class="status-opt" tag="2">
                    <i class="fa fa-stop" aria-hidden="true"></i>
                    <span class="sign">已完成</span>
                </li>
            </ul>
        </div>
        <div class="list" on-touchstart="startTouch($event)" on-touchend="endTouch($event)">
            <div class="item" s-for="item, index in filterTodos" data-index="{{index}}">
                <i class="fa{{item.status === '0' ? ' fa-play' : ''}}{{item.status === '1' ? ' fa-pause': ''}}{{item.status === '2'? ' fa-stop' : ''}}
                                {{item.prior === '0' ? ' high' : ''}}{{item.prior === '1' ? 'medium' : ''}}{{item.prior === '2' ? ' low' : ''}}"
                   aria-hidden="true"></i>
                <div class="content">{{item.content}}</div>
                <left-choose s-if="checkChoose[index].isLeftOn" on-enablepan="enablePan(index)"
                             index="{{index}}"></left-choose>
                <right-choose s-if="checkChoose[index].isRightOn" on-enablepan="enablePan(index)"
                              index="{{index}}"></right-choose>
            </div>
        </div>
    </div>
</template>

<script>
    import {Link} from 'san-router'
    import {connect} from 'san-store'
    import LeftChoose from './partial/Leftchoose.san'
    import RightChoose from './partial/Rightchoose.san'

    export default connect.san({todos: 'todos'}, {})({
        initData: function () {
            return {
                items: [1, 2],
                checkChoose: [],
                isTouchMoved: false,
                priorChosen: {
                    '0': false,
                    '1': false,
                    '2': false
                },
                statusChosen: {
                    '0': false,
                    '1': false,
                    '2': false
                }
            }
        },
        attached: function () {
            let lens = this.data.get('todos').length
            while (lens > 0) {
                this.data.push('checkChoose', {isLeftOn: false, isRightOn: false})
                lens--
            }
        },
        updated: function () {
            if (this.data.get('filterTodos').length < this.data.get('todos').length) {
                this.data.set('isTouchMoved', true)
            } else {
                this.data.set('isTouchMoved', false)
            }
        },
        components: {
            'router-link': Link,
            'left-choose': LeftChoose,
            'right-choose': RightChoose
        },
        startTouch: function (e) {
            if (!this.data.get('isTouchMoved')) {
                let target
                if (e.target.className === 'item') {
                    target = e.target
                } else if (e.target.parentNode.className === 'item') {
                    target = e.target.parentNode
                }
                this.data.set('startX', e.touches[0].pageX)
                this.data.set('selectedIndex', target.dataset.index)
            }
        },
        endTouch: function (e) {
            if (!this.data.get('isTouchMoved')) {
                let endX = e.changedTouches[0].pageX
                let startX = this.data.get('startX')
                let index = this.data.get('selectedIndex')
                if (startX - endX > 0) {
                    this.data.set(`checkChoose[${index}].isRightOn`, true)
                } else {
                    this.data.set(`checkChoose[${index}].isLeftOn`, true)
                }
                this.data.set('isTouchMoved', true)
                this.fire('chooseon')
            }
        },
        enablePan: function (index) {
            this.data.set('isTouchMoved', false)
            this.data.set(`checkChoose[${index}].isRightOn`, false)
            this.data.set(`checkChoose[${index}].isLeftOn`, false)
            this.fire('chooseoff')
        },
        chooseDisplay: function (e) {
            let target
            if (e.target.classList.contains('prior-opt') || e.target.classList.contains('status-opt')) {
                target = e.target
            }
            if (e.target.parentNode.classList.contains('prior-opt') || e.target.parentNode.classList.contains('status-opt')) {
                target = e.target.parentNode
            }
            if (target) {
                target.classList.toggle('sel')
                let tag = target.getAttribute('tag')
                if (target.classList.contains('prior-opt')) {
                    if (target.classList.contains('sel')) {
                        this.data.set(`priorChosen[${tag}]`, true)
                    } else {
                        this.data.set(`priorChosen[${tag}]`, false)
                    }
                }
                if (target.classList.contains('status-opt')) {
                    if (target.classList.contains('sel')) {
                        this.data.set(`statusChosen[${tag}]`, true)
                    } else {
                        this.data.set(`statusChosen[${tag}]`, false)
                    }
                }
            }
        },
        computed: {
            filterTodos: function () {
                let todos = this.data.get('todos')
                if (todos) {
                    return todos.filter((todo) => {
                        let prior = todo.prior
                        let status = todo.status
                        if (this.data.get(`priorChosen[${prior}]`) || this.data.get(`statusChosen[${status}]`, true)) {
                            return true
                        }

                        let noPrior = true
                        let noStatus = true
                        for (let i = 0, lens = Object.keys(this.data.get('priorChosen')).length; i < lens; i++) {
                            if (this.data.get(`priorChosen[${i}]`)) {
                                noPrior = false
                                break
                            }
                        }
                        for (let i = 0, lens = Object.keys(this.data.get('statusChosen')).length; i < lens; i++) {
                            if (this.data.get(`statusChosen[${i}]`)) {
                                noStatus = false
                                break
                            }
                        }
                        if (noPrior && noStatus) {
                            return true
                        }
                        return false
                    })
                }
            }
        }
    })
</script>

<style lang="scss">
    .select-prior {
        background: #fbebeb;
    }

    .select-status {
        background: #f0feed;
    }

    .sel {
        background: #2aabd2;
    }
</style>